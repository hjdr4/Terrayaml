package lib

import (
	"bytes"
	"fmt"
	"strings"

	"github.com/hashicorp/hcl/hcl/printer"
	"github.com/hashicorp/hcl/json/parser"
)

// FixEscaping makes quotes in quotes syntax to work
// ex: "my_var" = "${file("/dev/null")}"
func FixEscaping(s string) string {
	s = strings.Replace(s, `\"`, `"`, -1)
	s = strings.Replace(s, `\\`, `\`, -1)
	return s
}

// Format outputs a HCL file that is compliant with `terraform fmt`
func Format(s string) (string, error) {
	s = strings.Replace(s, "\n\n", "\n", -1)
	s = strings.Replace(s, "}\n", "}\n\n", -1)
	formated, err := printer.Format([]byte(s))
	if err != nil {
		return "", err
	}
	return strings.TrimSuffix(string(formated), "\n"), nil
}

// ToHCL takes a JSON input and outputs the corresponding HCL
func ToHCL(j string) (string, error) {
	input := j
	var err error
	if err != nil {
		return "", fmt.Errorf("unable to read from stdin: %s", err)
	}

	ast, err := parser.Parse([]byte(input))
	if err != nil {
		return "", fmt.Errorf("unable to parse JSON: %s", err)
	}

	var buff []byte
	buffer := bytes.NewBuffer(buff)
	//buffer.WriteString("#GENERATED BY TERRAYAML\n")

	err = printer.Fprint(buffer, ast)
	if err != nil {
		return "", fmt.Errorf("unable to print HCL: %s", err)
	}

	return Format(FixEscaping(buffer.String()))
}
